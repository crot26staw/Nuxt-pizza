const fs = require('fs').promises;
const path = require('path');

const sharp = require('sharp');
const toIco = require('to-ico');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ favicon
const FAVICON_CONFIG = [
  { name: 'apple-touch-icon.png', size: 120 },
  { name: 'icon-32x32.png', size: 32 },
  { name: 'icon-120x120.png', size: 120 },
  { name: 'icon-192x192.png', size: 192 },
  { name: 'icon-360x360.png', size: 360 },
];

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const INPUT_SVG = path.join(process.cwd(), 'public', 'icon.svg');
const OUTPUT_DIR = path.join(process.cwd(), 'public');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ SVG —Ñ–∞–π–ª–∞
 */
async function checkInputFile() {
  try {
    await fs.access(INPUT_SVG);
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:', INPUT_SVG);
  }
  catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª icon.svg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ public/');
    console.error('   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª public/icon.svg —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    process.exit(1);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PNG —Ñ–∞–π–ª —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ SVG
 */
async function generatePNG(outputPath, size) {
  try {
    await sharp(INPUT_SVG)
      .resize(size, size, {
        fit: 'contain',
        background: { r: 0, g: 0, b: 0, alpha: 0 },
      })
      .png({
        quality: 100,
        compressionLevel: 9,
      })
      .toFile(outputPath);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω: ${path.basename(outputPath)} (${size}x${size})`);
  }
  catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${path.basename(outputPath)}:`, error.message);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç favicon.ico –∏–∑ PNG 32x32
 */
async function generateICO() {
  const png32Path = path.join(OUTPUT_DIR, 'icon-32x32.png');
  const icoPath = path.join(OUTPUT_DIR, 'favicon.ico');

  try {
    const pngBuffer = await fs.readFile(png32Path);
    const icoBuffer = await toIco([pngBuffer]);
    await fs.writeFile(icoPath, icoBuffer);

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω: favicon.ico (32x32)');
  }
  catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è favicon.ico:', error.message);
    throw error;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö favicon
 */
async function generateFavicons() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é favicon...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    await checkInputFile();

    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ PNG —Ñ–∞–π–ª—ã
    console.log('\nüìÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PNG —Ñ–∞–π–ª–æ–≤:');
    for (const config of FAVICON_CONFIG) {
      const outputPath = path.join(OUTPUT_DIR, config.name);
      await generatePNG(outputPath, config.size);
    }

    // –°–æ–∑–¥–∞–µ–º favicon.ico
    console.log('\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ICO —Ñ–∞–π–ª–∞:');
    await generateICO();

    console.log('\n‚ú® –í—Å–µ favicon —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
    console.log('   ‚Ä¢ apple-touch-icon.png (120x120)');
    console.log('   ‚Ä¢ favicon.ico (32x32)');
    console.log('   ‚Ä¢ icon-32x32.png (32x32)');
    console.log('   ‚Ä¢ icon-120x120.png (120x120)');
    console.log('   ‚Ä¢ icon-192x192.png (192x192)');
    console.log('   ‚Ä¢ icon-360x360.png (360x360)');
  }
  catch (error) {
    console.error('\nüí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ favicon:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  generateFavicons();
}

module.exports = { generateFavicons };
