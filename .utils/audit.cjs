const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç DD-MM-YYYY_HH:MM
 */
function formatDate(date) {
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');

  return `${day}-${month}-${year}_${hours}-${minutes}`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 */
function ensureDirectoryExists(dirPath) {
  try {
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dirPath}`);
    }
    return true;
  }
  catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ ${dirPath}:`, error.message);
    return false;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç npm audit –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç
 */
function runAudit() {
  console.log('üîç –ó–∞–ø—É—Å–∫ npm audit...\n');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
  const auditDir = path.join(__dirname, 'audit');
  const timestamp = formatDate(new Date());
  const reportFileName = `audit-report_${timestamp}.json`;
  const reportPath = path.join(auditDir, reportFileName);

  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
  if (!ensureDirectoryExists(auditDir)) {
    process.exit(1);
  }

  // –ö–æ–º–∞–Ω–¥–∞ npm audit
  const auditCommand = 'npm audit --json';

  console.log(`üìã –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: ${auditCommand}`);
  console.log(`üìÅ –û—Ç—á–µ—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}\n`);

  // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
  exec(auditCommand, { cwd: process.cwd() }, (error, stdout, stderr) => {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
      fs.writeFileSync(reportPath, stdout);

      console.log(`‚úÖ –û—Ç—á–µ—Ç npm audit —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportFileName}`);
      console.log(`üìç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: ${reportPath}`);

      // –ü–∞—Ä—Å–∏–º JSON –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      try {
        const auditData = JSON.parse(stdout);

        if (auditData.metadata && auditData.metadata.vulnerabilities) {
          const vulnerabilities = auditData.metadata.vulnerabilities;
          console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:');
          console.log(`   üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ: ${vulnerabilities.critical || 0}`);
          console.log(`   üü† –í—ã—Å–æ–∫–∏–µ: ${vulnerabilities.high || 0}`);
          console.log(`   üü° –°—Ä–µ–¥–Ω–∏–µ: ${vulnerabilities.moderate || 0}`);
          console.log(`   üîµ –ù–∏–∑–∫–∏–µ: ${vulnerabilities.low || 0}`);
          console.log(`   ‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ: ${vulnerabilities.info || 0}`);

          const totalVulnerabilities = Object.values(vulnerabilities).reduce((sum, count) => sum + (count || 0), 0);

          if (totalVulnerabilities === 0) {
            console.log('\nüéâ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!');
          }
          else if (vulnerabilities.critical > 0) {
            console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏!');
            console.log('üõ†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å: npm audit fix');
          }
        }
      }
      catch (parseError) {
        console.log('\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç—á–µ—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ npm audit
      if (error) {
        if (error.code === 1) {
          console.log('\n‚ö†Ô∏è  npm audit –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º 1 (–æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏)');
          console.log('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ —Ñ–∞–π–ª–µ');
        }
        else {
          console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è npm audit:', error.message);
          if (stderr) {
            console.error('Stderr:', stderr);
          }
        }
      }
      else {
        console.log('\n‚ú® npm audit –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      }

      console.log('\nüèÅ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
    catch (writeError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', writeError.message);
      process.exit(1);
    }
  });
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã npm audit...\n');

  try {
    runAudit();
  }
  catch (error) {
    console.error('üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { runAudit };
