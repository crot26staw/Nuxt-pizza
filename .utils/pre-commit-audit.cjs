const { exec } = require('child_process');

/**
 * Pre-commit —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
 * –ë–ª–æ–∫–∏—Ä—É–µ—Ç –∫–æ–º–º–∏—Ç –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
 */
function runPreCommitAudit() {
  console.log('üîí Pre-commit: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...\n');

  return new Promise((resolve, reject) => {
    // –ö–æ–º–∞–Ω–¥–∞ npm audit —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    const auditCommand = 'npm audit --json';

    console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...');

    exec(auditCommand, { cwd: process.cwd() }, (error, stdout, stderr) => {
      try {
        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const auditData = JSON.parse(stdout);

        if (auditData.metadata && auditData.metadata.vulnerabilities) {
          const vulnerabilities = auditData.metadata.vulnerabilities;
          const criticalCount = vulnerabilities.critical || 0;
          const highCount = vulnerabilities.high || 0;

          console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
          console.log(`   üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ: ${criticalCount}`);
          console.log(`   üü† –í—ã—Å–æ–∫–∏–µ: ${highCount}`);

          // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
          if (criticalCount > 0) {
            console.log('\n‚ùå –ö–û–ú–ú–ò–¢ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù!');
            console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!');
            console.log('\nüõ†Ô∏è  –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
            console.log('   npm audit fix');
            console.log('   –∏–ª–∏');
            console.log('   npm audit fix --force');
            console.log('\nüí° –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–º–∏—Ç');

            reject(new Error('Critical vulnerabilities found'));
            return;
          }

          // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
          if (highCount > 0) {
            console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏!');
            console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ');
            console.log('   npm audit fix');
          }

          if (criticalCount === 0 && highCount === 0) {
            console.log('\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –≤—ã—Å–æ–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
          }

          console.log('\nüéâ Pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
          resolve();
        }
        else {
          console.log('\n‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
          console.log('üéâ Pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
          resolve();
        }
      }
      catch (parseError) {
        console.log('\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç npm audit');

        // –ï—Å–ª–∏ npm audit –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if (error && error.code === 1) {
          // –ö–æ–¥ 1 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö —É—Ä–æ–≤–µ–Ω—å
          console.log('‚ÑπÔ∏è  npm audit –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏');
          console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π: npm audit');
          resolve(); // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
        }
        else if (error) {
          console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è npm audit:', error.message);
          if (stderr) {
            console.error('Stderr:', stderr);
          }
          reject(error);
        }
        else {
          resolve();
        }
      }
    });
  });
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  try {
    await runPreCommitAudit();
    process.exit(0);
  }
  catch (error) {
    console.error('\nüí• Pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { runPreCommitAudit };
